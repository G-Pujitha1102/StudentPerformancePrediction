theme_minimal() +
ggtitle("R² Comparison")
View(metrics)
# Add Random Forest predictions to testData dataframe
testData$predicted_math_score_rf <- round(pred_rf)
# Now view the updated testData in Environment panel
View(testData)
View(testData)
# Add Random Forest predictions to testData dataframe
testData$predicted_math_score_rf <- round(pred_rf)
testData$predicted_math_score_lr <- round(predictions)    # Linear regression
testData$predicted_math_score_tree <- round(pred_tree)   # Decision tree
View(testData)
# -------------------------------
# 📦 Step 1: Install packages (once)
# -------------------------------
install.packages("tidyverse")
install.packages("caret")
install.packages("ggplot2")
install.packages("corrplot")
install.packages("dplyr")
install.packages("reshape2")
# 📦 Step 1: Install packages (once)
# -------------------------------
install.packages("tidyverse")
install.packages("caret")
install.packages("ggplot2")
install.packages("corrplot")
install.packages("dplyr")
install.packages("reshape2")
install.packages("Metrics")
install.packages("rpart")
install.packages("randomForest")
# 📚 Step 2: Load libraries
# -------------------------------
library(tidyverse)
library(caret)
library(ggplot2)
library(corrplot)
library(dplyr)
library(reshape2)
library(Metrics)
library(rpart)
library(randomForest)
# -------------------------------
# 📂 Step 3: Load data
# -------------------------------
data <- read.csv("C:/Users/Dell/Downloads/StudentsPerformance.csv")
cat("Number of rows: ", nrow(data), "\n")
cat("Column names:\n")
print(colnames(data))
cat("Preview:\n")
head(data)
# Convert categorical columns
data$gender <- as.factor(data$gender)
data$race.ethnicity <- as.factor(data$race.ethnicity)
data$parental.level.of.education <- as.factor(data$parental.level.of.education)
data$lunch <- as.factor(data$lunch)
data$test.preparation.course <- as.factor(data$test.preparation.course)
# -------------------------------
# 📊 Step 4: Correlation plot
# -------------------------------
numeric_data <- data[, c("math.score", "reading.score", "writing.score")]
correlation <- cor(numeric_data)
corrplot(correlation, method = "circle")
# -------------------------------
# ✂️ Step 5: Train/test split (80/20)
# -------------------------------
set.seed(123)
sample_index <- sample(1:nrow(data), 0.8 * nrow(data))
trainData <- data[sample_index, ]
testData <- data[-sample_index, ]
cat("Training rows:", nrow(trainData), "\n")
cat("Testing rows:", nrow(testData), "\n")
# -------------------------------
# 🔁 Step 6: Linear Regression Model
# -------------------------------
model <- lm(math.score ~ reading.score + writing.score + gender + lunch + test.preparation.course, data = trainData)
# Predict on test data (Linear Regression)
predictions <- predict(model, newdata = testData)
testData$predicted_math_score_lr <- round(predictions)
# -------------------------------
# 📉 Step 7: Residuals and Performance
# -------------------------------
testData$residual <- testData$math.score - testData$predicted_math_score_lr
testData$performance_category <- cut(
testData$math.score,
breaks = c(-Inf, 60, 85, Inf),
labels = c("Needs Improvement", "Average", "High Performer")
)
testData$underperforming <- testData$residual < 0
underperforming_needs_help <- subset(
testData,
performance_category == "Needs Improvement" & residual < 0
)
# -------------------------------
# 📈 Step 8: Visualizations
# -------------------------------
# Bar plot - performance category
ggplot(testData, aes(x = performance_category)) +
geom_bar(fill = "skyblue") +
labs(title = "Performance Category Count", x = "Category", y = "Number of Students")
# Histogram - residuals
ggplot(testData, aes(x = residual)) +
geom_histogram(binwidth = 1, fill = "pink", color = "black") +
labs(title = "Residual Distribution", x = "Residual", y = "Frequency")
# Scatter plot - actual vs predicted (linear regression)
data_to_plot <- data.frame(actual = testData$math.score, predicted = testData$predicted_math_score_lr)
plot(data_to_plot$actual, data_to_plot$predicted,
col = "blue", pch = 19,
xlab = "Actual Math Score",
ylab = "Predicted Math Score",
main = "Actual vs Predicted Math Scores")
abline(0, 1, col = "red", lwd = 2)
# Pie chart - gender distribution
gender_counts <- table(testData$gender)
pie(gender_counts,
labels = paste(names(gender_counts), "\n", gender_counts),
main = "Gender Distribution",
col = c("lightblue", "pink"))
# Stacked bar - lunch vs performance
ggplot(testData, aes(x = lunch, fill = performance_category)) +
geom_bar(position = "dodge") +
labs(title = "Lunch Type vs Performance Category", x = "Lunch Type", y = "Count") +
theme_minimal()
# Violin plot - test prep vs math score
ggplot(testData, aes(x = test.preparation.course, y = math.score, fill = test.preparation.course)) +
geom_violin(trim = FALSE) +
labs(title = "Math Score by Test Prep", x = "Test Prep", y = "Math Score") +
theme_minimal()
# Density plot - subject scores
scores_melted <- melt(testData[, c("math.score", "reading.score", "writing.score")])
ggplot(scores_melted, aes(x = value, color = variable)) +
geom_density(size = 1.2) +
labs(title = "Density Plot of Scores", x = "Score", y = "Density") +
theme_minimal()
# Horizontal bar - race vs performance
ggplot(testData, aes(x = race.ethnicity, fill = performance_category)) +
geom_bar() +
labs(title = "Performance by Race", x = "Race", y = "Count") +
coord_flip() +
theme_minimal()
# Scatter plot - reading vs writing by gender
ggplot(testData, aes(x = reading.score, y = writing.score)) +
geom_point(aes(color = gender), alpha = 0.6) +
facet_wrap(~gender) +
labs(title = "Reading vs Writing Score by Gender", x = "Reading", y = "Writing") +
theme_minimal()
# -------------------------------
# 👁️ Step 9: View Environment DataFrames
# -------------------------------
# Decision Tree
tree_model <- rpart(math.score ~ ., data = trainData, method = "anova")
pred_tree <- predict(tree_model, testData)
testData$predicted_math_score_tree <- round(pred_tree)
# Random Forest
rf_model <- randomForest(math.score ~ ., data = trainData)
pred_rf <- predict(rf_model, testData)
testData$predicted_math_score_rf <- round(pred_rf)
# View testData with all predictions in Environment panel
View(testData)
# -------------------------------
# 📊 Step 10: Linear Model Accuracy
# -------------------------------
rmse_lr <- rmse(testData$math.score, predictions)
r2_lr <- summary(model)$r.squared
cat("Linear Regression RMSE:", rmse_lr, "\n")
cat("Linear Regression R-squared:", r2_lr, "\n")
# -------------------------------
# 🌳 Step 11: Decision Tree & Random Forest Metrics
# -------------------------------
rmse_tree <- rmse(testData$math.score, pred_tree)
r2_tree <- 1 - sum((testData$math.score - pred_tree)^2) / sum((testData$math.score - mean(testData$math.score))^2)
rmse_rf <- rmse(testData$math.score, pred_rf)
r2_rf <- 1 - sum((testData$math.score - pred_rf)^2) / sum((testData$math.score - mean(testData$math.score))^2)
cat("Decision Tree RMSE:", rmse_tree, "\n")
cat("Decision Tree R-squared:", r2_tree, "\n")
cat("Random Forest RMSE:", rmse_rf, "\n")
cat("Random Forest R-squared:", r2_rf, "\n")
# -------------------------------
# 📊 Step 12: Compare Models - Bar Charts
# -------------------------------
metrics <- data.frame(
Model = c("Linear Regression", "Decision Tree", "Random Forest"),
RMSE = c(round(rmse_lr, 2), round(rmse_tree, 2), round(rmse_rf, 2)),
R2 = c(round(r2_lr, 3), round(r2_tree, 3), round(r2_rf, 3))
)
# RMSE Comparison Plot
ggplot(metrics, aes(x = Model, y = RMSE, fill = Model)) +
geom_bar(stat = "identity") +
theme_minimal() +
ggtitle("RMSE Comparison of Models")
# R² Comparison Plot
ggplot(metrics, aes(x = Model, y = R2, fill = Model)) +
geom_bar(stat = "identity") +
theme_minimal() +
ggtitle("R² Comparison of Models")
return(result)
volcylinder_mimo=function(dia,len){
volume=(pi*dia^2)*len/4
surface_area=pi*dia*len
result=list("volume=volume"," surface_area= surface_area")
return(result)
}
source("~/function.R")
volcylinder_mimo(5,7)
return(result)
volcylinder_mimo(5,7
volcylinder_mimo(5,7)
vol(7,8)
volcylinder_mimo=function(dia,len){
volume=(pi*dia^2)*len/4
surface_area=pi*dia*len
result=list("volume=volume"," surface_area= surface_area")
return(result)
}
source("~/function.R")
source("~/function.R")
result=volcylinder_mimo(7,9)
return(result)
result=volcylinder_mimo(7,9)
return("volume")
result=volcylinder_mimo(7,9)
return["volume"]
source("~/function.R")
source("~/function.R", echo = TRUE)
result=volcylinder_mimo(7,8)
return(result)
volcylinder_mimo <- function(dia, len) {
volume <- (pi * dia^2) * len / 4
surface_area <- pi * dia * len
result <- list(volume = volume, surface_area = surface_area)
return(result)
}
source("~/function.R", echo = TRUE)
# Scatter plot - reading vs writing by gender
ggplot(testData, aes(x = reading.score, y = writing.score)) +
geom_point(aes(color = gender), alpha = 0.6) +
facet_wrap(~gender) +
labs(title = "Reading vs Writing Score by Gender", x = "Reading", y = "Writing") +
theme_minimal()
install.packages("ggplot2")
library(ggplot2)
# Scatter plot - reading vs writing by gender
ggplot(testData, aes(x = reading.score, y = writing.score)) +
geom_point(aes(color = gender), alpha = 0.6) +
facet_wrap(~gender) +
labs(title = "Reading vs Writing Score by Gender", x = "Reading", y = "Writing") +
theme_minimal()
library(shiny)
library(ggplot2)
library(caret)
library(randomForest)
library(rpart)
library(Metrics)
# Load data
data <- read.csv("C:/Users/Dell/Downloads/StudentsPerformance.csv")
# Data preprocessing
data$parental.level.of.education <- as.factor(data$parental.level.of.education)
data$gender <- as.factor(data$gender)
data$race.ethnicity <- as.factor(data$race.ethnicity)
data$lunch <- as.factor(data$lunch)
data$test.preparation.course <- as.factor(data$test.preparation.course)
# Split into training/testing
set.seed(123)
trainIndex <- createDataPartition(data$math.score, p = 0.8, list = FALSE)
trainData <- data[trainIndex, ]
testData <- data[-trainIndex, ]
# Train models
lr_model <- lm(math.score ~ gender + race.ethnicity + parental.level.of.education + lunch + test.preparation.course + reading.score + writing.score, data = trainData)
dt_model <- rpart(math.score ~ gender + race.ethnicity + parental.level.of.education + lunch + test.preparation.course + reading.score + writing.score, data = trainData)
rf_model <- randomForest(math.score ~ gender + race.ethnicity + parental.level.of.education + lunch + test.preparation.course + reading.score + writing.score, data = trainData)
# Define UI
ui <- fluidPage(
titlePanel("Student Performance Prediction"),
sidebarLayout(
sidebarPanel(
selectInput("gender", "Gender:", choices = unique(data$gender)),
selectInput("race", "Race/Ethnicity:", choices = unique(data$race.ethnicity)),
selectInput("parent_edu", "Parental Level of Education:", choices = unique(data$parental.level.of.education)),
selectInput("lunch", "Lunch Type:", choices = unique(data$lunch)),
selectInput("prep", "Test Preparation Course:", choices = unique(data$test.preparation.course)),
numericInput("reading", "Reading Score:", value = 70, min = 0, max = 100),
numericInput("writing", "Writing Score:", value = 70, min = 0, max = 100)
),
mainPanel(
h4("Predicted Math Score (by Model):"),
verbatimTextOutput("prediction_text"),
h4("Performance Category:"),
verbatimTextOutput("performance"),
h4("Model Metrics (RMSE & R²):"),
tableOutput("model_metrics"),
h4("Predicted Score Comparison Plot:"),
plotOutput("prediction_plot"),
h4("Help Message:"),
textOutput("help_message"),
h4("Export:"),
downloadButton("downloadData", "Download Prediction Report")
)
)
)
# Define Server
server <- function(input, output) {
# Reactive user input with proper factor levels
user_input <- reactive({
data.frame(
gender = factor(input$gender, levels = levels(data$gender)),
race.ethnicity = factor(input$race, levels = levels(data$race.ethnicity)),
parental.level.of.education = factor(input$parent_edu, levels = levels(data$parental.level.of.education)),
lunch = factor(input$lunch, levels = levels(data$lunch)),
test.preparation.course = factor(input$prep, levels = levels(data$test.preparation.course)),
reading.score = as.numeric(input$reading),
writing.score = as.numeric(input$writing)
)
})
# Predict math scores
output$prediction_text <- renderPrint({
new_data <- user_input()
pred_lr <- predict(lr_model, newdata = new_data)
pred_dt <- predict(dt_model, newdata = new_data)
pred_rf <- predict(rf_model, newdata = new_data)
cat("Predicted Math Scores (based on input):\n")
cat("Linear Regression:", round(pred_lr, 2), "\n")
cat("Decision Tree:", round(pred_dt, 2), "\n")
cat("Random Forest:", round(pred_rf, 2), "\n")
})
# Performance category
output$performance <- renderPrint({
new_data <- user_input()
avg <- mean(c(
predict(lr_model, newdata = new_data),
predict(dt_model, newdata = new_data),
predict(rf_model, newdata = new_data)
))
cat("Performance Category:\n")
if (avg < 50) {
cat("Underperforming")
} else {
cat("Performing Well")
}
})
}
# Model metrics
output$model_metrics <- renderTable({
pred_lr <- predict(lr_model, newdata = testData)
pred_dt <- predict(dt_model, newdata = testData)
pred_rf <- predict(rf_model, newdata = testData)
data.frame(
Model = c("Linear Regression", "Decision Tree", "Random Forest"),
RMSE = c(rmse(testData$math.score, pred_lr),
rmse(testData$math.score, pred_dt),
rmse(testData$math.score, pred_rf)),
R_squared = c(R2(pred_lr, testData$math.score),
R2(pred_dt, testData$math.score),
R2(pred_rf, testData$math.score))
)
})
library(shiny)
library(randomForest)
library(rpart)
library(caret)
library(ggplot2)
# Load data
data <- read.csv("C:/Users/Dell/Downloads/StudentsPerformance.csv")
# Data preprocessing
data$parental.level.of.education <- as.factor(data$parental.level.of.education)
data$gender <- as.factor(data$gender)
data$race.ethnicity <- as.factor(data$race.ethnicity)
data$lunch <- as.factor(data$lunch)
data$test.preparation.course <- as.factor(data$test.preparation.course)
# Train-test split
set.seed(123)
trainIndex <- createDataPartition(data$math.score, p = 0.8, list = FALSE)
trainData <- data[trainIndex, ]
testData <- data[-trainIndex, ]
# Train models
lr_model <- lm(math.score ~ gender + race.ethnicity + parental.level.of.education + lunch + test.preparation.course + reading.score + writing.score, data = trainData)
dt_model <- rpart(math.score ~ gender + race.ethnicity + parental.level.of.education + lunch + test.preparation.course + reading.score + writing.score, data = trainData)
rf_model <- randomForest(math.score ~ gender + race.ethnicity + parental.level.of.education + lunch + test.preparation.course + reading.score + writing.score, data = trainData)
# Define UI
ui <- fluidPage(
titlePanel("Student Performance Prediction"),
sidebarLayout(
sidebarPanel(
selectInput("gender", "Gender:", choices = unique(data$gender)),
selectInput("race", "Race/Ethnicity:", choices = unique(data$race.ethnicity)),
selectInput("parent_edu", "Parental Level of Education:", choices = unique(data$parental.level.of.education)),
selectInput("lunch", "Lunch Type:", choices = unique(data$lunch)),
selectInput("prep", "Test Preparation Course:", choices = unique(data$test.preparation.course)),
numericInput("reading", "Reading Score:", value = 70, min = 0, max = 100),
numericInput("writing", "Writing Score:", value = 70, min = 0, max = 100)
),
mainPanel(
h4("Predicted Math Score (by Model):"),
verbatimTextOutput("prediction_text"),
h4("Performance Category:"),
verbatimTextOutput("performance"),
h4("Model Metrics (RMSE & R²):"),
tableOutput("model_metrics"),
h4("Predicted Score Comparison Plot:"),
plotOutput("prediction_plot"),
h4("Help Message:"),
textOutput("help_message"),
h4("Export:"),
downloadButton("downloadData", "Download Prediction Report")
)
)
)
# Define Server
server <- function(input, output) {
# Reactive user input
user_input <- reactive({
data.frame(
gender = factor(input$gender, levels = levels(data$gender)),
race.ethnicity = factor(input$race, levels = levels(data$race.ethnicity)),
parental.level.of.education = factor(input$parent_edu, levels = levels(data$parental.level.of.education)),
lunch = factor(input$lunch, levels = levels(data$lunch)),
test.preparation.course = factor(input$prep, levels = levels(data$test.preparation.course)),
reading.score = input$reading,
writing.score = input$writing
)
})
# Prediction output
output$prediction_text <- renderPrint({
new_data <- user_input()
pred_lr <- predict(lr_model, newdata = new_data)
pred_dt <- predict(dt_model, newdata = new_data)
pred_rf <- predict(rf_model, newdata = new_data)
cat("Linear Regression:", round(pred_lr, 2), "\n")
cat("Decision Tree:", round(pred_dt, 2), "\n")
cat("Random Forest:", round(pred_rf, 2), "\n")
})
# Performance category
output$performance <- renderPrint({
new_data <- user_input()
avg_score <- mean(c(
predict(lr_model, newdata = new_data),
predict(dt_model, newdata = new_data),
predict(rf_model, newdata = new_data)
))
if (avg_score < 50) {
cat("Underperforming")
} else {
cat("Performing Well")
}
})
# Model evaluation metrics
output$model_metrics <- renderTable({
pred_lr <- predict(lr_model, newdata = testData)
pred_dt <- predict(dt_model, newdata = testData)
pred_rf <- predict(rf_model, newdata = testData)
data.frame(
Model = c("Linear Regression", "Decision Tree", "Random Forest"),
RMSE = c(RMSE(pred_lr, testData$math.score),
RMSE(pred_dt, testData$math.score),
RMSE(pred_rf, testData$math.score)),
R2 = c(R2(pred_lr, testData$math.score),
R2(pred_dt, testData$math.score),
R2(pred_rf, testData$math.score))
)
})
# Comparison plot
output$prediction_plot <- renderPlot({
new_data <- user_input()
predictions <- data.frame(
Model = c("Linear Regression", "Decision Tree", "Random Forest"),
Score = c(
predict(lr_model, newdata = new_data),
predict(dt_model, newdata = new_data),
predict(rf_model, newdata = new_data)
)
)
ggplot(predictions, aes(x = Model, y = Score, fill = Model)) +
geom_col() +
theme_minimal() +
labs(title = "Predicted Math Scores by Model", y = "Score", x = "")
})
# Help message
output$help_message <- renderText({
"Adjust the inputs on the left to see predicted math scores by different models. Click 'Download' to export your results."
})
# Download handler
output$downloadData <- downloadHandler(
filename = function() {
paste("prediction_results_", Sys.Date(), ".csv", sep = "")
},
content = function(file) {
new_data <- user_input()
results <- data.frame(
Gender = input$gender,
Race = input$race,
Parental_Education = input$parent_edu,
Lunch = input$lunch,
Test_Prep = input$prep,
Reading_Score = input$reading,
Writing_Score = input$writing,
Pred_LR = predict(lr_model, newdata = new_data),
Pred_DT = predict(dt_model, newdata = new_data),
Pred_RF = predict(rf_model, newdata = new_data)
)
write.csv(results, file, row.names = FALSE)
}
)
}
# Run app
shinyApp(ui = ui, server = server)
runApp('C:/Users/DELL/Desktop/StudentPerformancePrediction')
shiny::runApp('~')
runApp()
runApp('~')
runApp()
getwd()
